---
description: Figma Component Creation Workflow
alwaysApply: true
---

# Figma Component Workflow

## Trigger Keywords

### Standard Figma Component Creation
When the user says any of the following, execute ONLY the Figma component workflow:
- "build a figma component"
- "create a figma component"
- "build this component" (with Figma link)
- "make a figma component"
- "build a complete figma component"

### Complete Figma + Storyblok Integration
When the user says any of the following, execute BOTH Figma AND Storyblok workflows:
- "build a figma component and create a storyblok module"
- "create a figma component with storyblok integration"
- "build this component and add it to storyblok"
- "make a figma component and storyblok component"
- "build a complete figma component with CMS integration"
- "figma to storyblok component"
- "complete figma storyblok workflow"

**IMPORTANT**: When Storyblok integration is requested, DO NOT STOP after Figma component creation. Continue with @storyblok.mdc workflow.

---

## Required Workflow Steps

### üéØ 1. Figma Analysis & Design Understanding
- Use Figma tools to extract design specifications, colors, typography, spacing
- Identify component structure, layout patterns, and responsive behavior
- Note any interactive elements, states, or variants
- Identify if the component is a main component or a sub-component
- Identify if the component already exists in the project
- When multiple files are linked, analyze structure:
  - If it's a group of components, ask user to clarify main vs sub-component
  - If singular component with smaller elements inside, create sub-components
  - Create UI components for reusable elements (buttons, inputs, etc.)

### üìù 2. Component Design Rules

**Naming Conventions:**
- **Main Components**: Simple, descriptive names (e.g., "Header Home", "Intro", "Media Highlight", "FAQ")
- **Sub-Components**: Descriptive sub-names (e.g., "news-card" under `card/` folder)

**Component Structure:**
- **Main Components**: `./components/sections/[component-name]/`
- **Sub-Components**: `./components/sections/[component-name]/components/`
- **UI Components**: `./components/ui/[component-name]/`

**Component Types:**
- Main Component - Full section/page components
- Sub-Component - Nested within main components
- UI Component - Reusable elements (buttons, inputs, icons)

**Typography Rules:**
- Use Typography component from `./components/ui/typography/typography.component.tsx`
- Always specify: `type`, `size`, `color`, `weight`, `className`
- Sizes defined in `typography.variants.data.tsx`
- If size not defined, create new variant: `body[size]` (e.g., `body14` for 14px)
- See @typography.mdc for complete usage guide

**Spacing Rules:**
- Main components: NO predefined top/bottom padding (handled by CMS)
- Sub-components: CAN have predefined spacing
- See @spacing.mdc for Tailwind custom spacing scale

### üìù 3. TypeScript Type Generation
Create `frontend/types/figma/[component-name].types.ts`:
- Define interfaces following existing patterns
- Use optional (?) for non-required fields
- Include proper asset structure for media fields
- Export both Fields and main interfaces

### üìù 4. React Component Creation
Create `frontend/components/sections/[component-name]/[component-name].component.tsx`:

**Requirements:**
- Use existing UI components: Typography, Container, Button, Icon
- Follow responsive design: mobile-first with Tailwind
- Each component in separate file
- Import Link from 'next/link' when using links
- Import Image from 'next/image' when using images
- Buttons always use `type="button"`
- Ask user about interactions if unclear from Figma

**Best Practices:**
- Use early returns for validation
- Implement proper TypeScript typing
- Follow project's Tailwind spacing scale (see @spacing.mdc)
- Use Typography component for ALL text (see @typography.mdc)

### üì¶ 5. Export Management
- Create component index.ts: `export { default } from './[component-name].component';`
- Update `frontend/components/sections/index.ts` with new component export
- Update `frontend/types/figma/index.ts` with new type exports

### üìã 6. Delivery Summary
Provide:
- Component overview (2-3 sentences)
- Figma link reference
- Component type (Main/Sub/UI)
- Files created/modified
- Next steps

### Workflow Checklist
- [ ] Figma Analysis & Design Understanding
- [ ] Component Design Rules Applied
- [ ] TypeScript Types Created
- [ ] React Component Created  
- [ ] Exports Configured
- [ ] Best Practices Followed
- [ ] Delivery Summary Provided

---

## Storyblok Integration

When user requests Storyblok integration with trigger phrases containing "storyblok", "CMS integration", or "with storyblok":

**‚ö†Ô∏è CRITICAL CHECKPOINT:**
- ‚ùå DO NOT STOP after completing Figma component creation
- ‚úÖ CONTINUE with ALL Storyblok integration steps from @storyblok.mdc
- ‚úÖ ACTUALLY create components in Storyblok using Management API
- ‚úÖ CREATE a working test story in Storyblok
- ‚úÖ VERIFY components render correctly

See @storyblok.mdc for complete Storyblok integration workflow.

---

## References

For detailed implementation guides:
- **Typography**: @typography.mdc - Complete Typography component usage
- **Spacing**: @spacing.mdc - Tailwind custom spacing scale conversions
- **Storyblok**: @storyblok.mdc - Complete CMS integration workflow